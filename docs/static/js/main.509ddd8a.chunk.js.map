{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","placeholder","value","onChange","target","GifGridItem","title","url","className","href","rel","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OAEI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IACzBR,EAAc,CAACE,IACfC,EAAc,MAMlB,SACI,uBACIM,KAAK,OACLC,YAAY,gBACZC,MAAOT,EACPU,SApBc,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,a,OCNlBG,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAC/B,OACI,sBAAKC,UAAU,yCAAf,UACI,mBAAGC,KAAMF,EAAKH,OAAO,SAASM,IAAI,aAAlC,SAA+C,qBAAKC,IAAKJ,EAAKK,IAAKN,MACnE,mBAAGE,UAAU,aAAb,SAA2BF,Q,uBCLtBO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbR,EAFa,iDAEmCS,UAAUF,GAF7C,+DAGDG,MAAMV,GAHL,cAGbW,EAHa,gBAIEA,EAAIC,OAJN,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIE,cAAN,aAAE,EAAYC,iBAAiBnB,QAVvB,kBAcZc,GAdY,4CAAH,sDCKXM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAERW,ECLW,SAACX,GAAc,IAAD,EAEZtB,mBAAS,CAC/B4B,KAAM,KAH4B,mBAE/BQ,EAF+B,KAExBC,EAFwB,KAetC,OATAC,qBAAU,WACNjB,EAAQC,GACPiB,MAAM,SAAAC,GACCH,EAAS,CACLT,KAAMY,SAGnB,CAAClB,IAEGc,EDVgBK,CAAanB,GAA7BM,KAEP,OACI,qCACA,oBAAIZ,UAAU,mDAAd,SAAkEM,IAGlE,qBAAKN,UAAU,YAAf,SAEQiB,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEe3BU,EA5Ba,WAAM,MAIM1C,mBAAS,CAAC,KAJhB,mBAIvB2C,EAJuB,KAIX5C,EAJW,KAW9B,OACI,gCACI,oBAAIiB,UAAU,QAAd,wBACA,cAAC,EAAD,CAAajB,cAAeA,IAC5B,uBAEA,6BAEI4C,EAAWb,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAAuBA,SAAUA,GAAnBA,YCbnBsB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.509ddd8a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = e =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e =>{      \r\n        e.preventDefault();  \r\n\r\n        if(inputValue.trim().length >2){\r\n            setCategories([inputValue]);\r\n            setInputValue('');\r\n        }        \r\n    }\r\n\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>        \r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Buscar GIF...\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>        \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <a href={url} target=\"_blank\" rel=\"noreferrer\"><img src={url} alt={title} /></a>\r\n            <p className=\"title-item\">{title}</p>            \r\n        </div>\r\n    )\r\n}\r\n","\r\n    export const getGifs = async (category) =>{\r\n\r\n        const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=20&api_key=CBAxhDJKo8sV0mHqJcwNixTwDaq6f8l9`\r\n        const res = await fetch(url);\r\n        const {data} = await res.json();\r\n\r\n        const gifs = data.map(img=>{\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n    \r\n        return gifs;\r\n    }  \r\n","import React from 'react'\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: images} = useFetchGifs(category);\r\n   \r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn title-category\">{category}</h3> \r\n        \r\n        \r\n        <div className=\"card-grid\">                                     \r\n            {\r\n                images.map(img =>(               \r\n                    <GifGridItem key={img.id} {...img}/>\r\n                ))\r\n            }    \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: []        \r\n    })\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then( imgs => {                        \r\n                setState({\r\n                    data: imgs,                   \r\n                })           \r\n        })\r\n    }, [category])    \r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    /* const categories = ['One Punch', 'Samurai X', 'Dragon Ball']; */\r\n\r\n    const [categories, setCategories] = useState([''])\r\n\r\n    /* const handleAdd = () =>{        \r\n        setCategories([...categories, 'Naruto']);        \r\n    } */\r\n\r\n    \r\n    return (\r\n        <div>                    \r\n            <h2 className=\"title\">Gif Cael's</h2>                      \r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                categories.map(category =>(                    \r\n                    <GifGrid key={category}category={category} />                  \r\n                ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}